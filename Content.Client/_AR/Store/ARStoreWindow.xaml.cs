using Content.Client.Message;
using Content.Shared._AR.Currency;
using Content.Shared._AR.Store;
using Content.Shared._AR.Store.Prototypes;
using Robust.Client.AutoGenerated;
using Robust.Client.UserInterface.Controls;
using Robust.Client.UserInterface.CustomControls;
using Robust.Client.UserInterface.XAML;
using Robust.Shared.Prototypes;

namespace Content.Client._AR.Store;

[GenerateTypedNameReferences]
public sealed partial class ARStoreWindow : DefaultWindow
{
    [Dependency] private readonly IPrototypeManager _prototype = default!;

    private readonly Dictionary<ProtoId<ARStoreCategoryPrototype>, ARStoreCategoryPrototype> _categories = new();
    private readonly Dictionary<ProtoId<ARCurrencyPrototype>, int> _currencies = new();
    private readonly HashSet<ARStoreItemControl> _itemControls = new();

    private ProtoId<ARStoreCategoryPrototype> _categoryId = string.Empty;

    public event Action<ARStoreItemEntry>? OnBuyItem;

    private ARStoreCategoryPrototype Category => _categories[_categoryId];

    public ARStoreWindow()
    {
        RobustXamlLoader.Load(this);
        IoCManager.InjectDependencies(this);
    }

    public void UpdateState(ARStoreUiUpdateState state)
    {
        Title = Loc.GetString(state.Name);

        UpdateCategories(state.PresetId);
        UpdateBalance(state.Currencies);
    }

    public void UpdateState(ARStoreUiUpdateBalanceState state)
    {
        UpdateBalance(state.Currencies);
    }

    public void UpdateBalance(Dictionary<ProtoId<ARCurrencyPrototype>, int> currencies)
    {
        _currencies.Clear();

        var balance = string.Empty;
        foreach (var (id, amount) in currencies)
        {
            var currency = _prototype.Index(id);

            _currencies.Add(id, amount);

            balance += Loc.GetString("store-ui-balance-display",
                ("amount", amount),
                ("currency", currency.LocName)
            );
        }

        BalanceInfo.SetMarkup(balance.TrimEnd());
        UpdateItems();
    }

    private void UpdateCategories(ProtoId<ARStorePresetPrototype> presetId)
    {
        SetDefaultCategory();

        var preset = _prototype.Index(presetId);
        var group = new ButtonGroup();

        _categories.Clear();
        CategoriesContainer.RemoveAllChildren();

        foreach (var categoryId  in preset.Categories)
        {
            var category = _prototype.Index(categoryId);
            _categories.Add(categoryId, category);

            var control = new ARStoreCategoryControl(categoryId, group, categoryId == _categoryId);
            control.SelectButton.OnButtonDown += _ => OnCategorySelect(category);

            CategoriesContainer.AddChild(control);
        }
    }

    private void SetDefaultCategory()
    {
        foreach (var (id, _) in _categories)
        {
            SetCategory(id);
            return;
        }
    }

    private void OnCategorySelect(ARStoreCategoryPrototype prototype)
    {
        SetCategory(prototype.ID);
    }

    private void SetCategory(ProtoId<ARStoreCategoryPrototype> categoryId)
    {
        _categoryId = categoryId;

        _itemControls.Clear();
        ItemsContainer.RemoveAllChildren();

        foreach (var categoryEntry in Category.Entries)
        {
            var control = new ARStoreItemControl(categoryEntry);
            control.DealButton.OnButtonDown += _ => OnBuyItem?.Invoke(categoryEntry);

            UpdateItem(control);

            _itemControls.Add(control);
            ItemsContainer.AddChild(control);
        }
    }

    private void UpdateItems()
    {
        foreach (var itemControl in _itemControls)
        {
            UpdateItem(itemControl);
        }
    }

    private void UpdateItem(ARStoreItemControl item)
    {
        if (!_currencies.TryGetValue(item.Currency, out var count))
            count = 0;

        item.UpdateCurrency(count);
    }
}
